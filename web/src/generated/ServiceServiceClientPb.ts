/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.21.7
// source: service.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as service_pb from './service_pb';


export class MusicPlayerClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorPlay = new grpcWeb.MethodDescriptor(
    '/MusicPlayer/Play',
    grpcWeb.MethodType.SERVER_STREAMING,
    service_pb.PlayRequest,
    service_pb.PlayResponse,
    (request: service_pb.PlayRequest) => {
      return request.serializeBinary();
    },
    service_pb.PlayResponse.deserializeBinary
  );

  play(
    request: service_pb.PlayRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<service_pb.PlayResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/MusicPlayer/Play',
      request,
      metadata || {},
      this.methodDescriptorPlay);
  }

  methodDescriptorPause = new grpcWeb.MethodDescriptor(
    '/MusicPlayer/Pause',
    grpcWeb.MethodType.UNARY,
    service_pb.PauseRequest,
    service_pb.PauseResponse,
    (request: service_pb.PauseRequest) => {
      return request.serializeBinary();
    },
    service_pb.PauseResponse.deserializeBinary
  );

  pause(
    request: service_pb.PauseRequest,
    metadata: grpcWeb.Metadata | null): Promise<service_pb.PauseResponse>;

  pause(
    request: service_pb.PauseRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: service_pb.PauseResponse) => void): grpcWeb.ClientReadableStream<service_pb.PauseResponse>;

  pause(
    request: service_pb.PauseRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: service_pb.PauseResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MusicPlayer/Pause',
        request,
        metadata || {},
        this.methodDescriptorPause,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MusicPlayer/Pause',
    request,
    metadata || {},
    this.methodDescriptorPause);
  }

  methodDescriptorNext = new grpcWeb.MethodDescriptor(
    '/MusicPlayer/Next',
    grpcWeb.MethodType.UNARY,
    service_pb.NextRequest,
    service_pb.NextResponse,
    (request: service_pb.NextRequest) => {
      return request.serializeBinary();
    },
    service_pb.NextResponse.deserializeBinary
  );

  next(
    request: service_pb.NextRequest,
    metadata: grpcWeb.Metadata | null): Promise<service_pb.NextResponse>;

  next(
    request: service_pb.NextRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: service_pb.NextResponse) => void): grpcWeb.ClientReadableStream<service_pb.NextResponse>;

  next(
    request: service_pb.NextRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: service_pb.NextResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MusicPlayer/Next',
        request,
        metadata || {},
        this.methodDescriptorNext,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MusicPlayer/Next',
    request,
    metadata || {},
    this.methodDescriptorNext);
  }

  methodDescriptorPrev = new grpcWeb.MethodDescriptor(
    '/MusicPlayer/Prev',
    grpcWeb.MethodType.UNARY,
    service_pb.PrevRequest,
    service_pb.PrevResponse,
    (request: service_pb.PrevRequest) => {
      return request.serializeBinary();
    },
    service_pb.PrevResponse.deserializeBinary
  );

  prev(
    request: service_pb.PrevRequest,
    metadata: grpcWeb.Metadata | null): Promise<service_pb.PrevResponse>;

  prev(
    request: service_pb.PrevRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: service_pb.PrevResponse) => void): grpcWeb.ClientReadableStream<service_pb.PrevResponse>;

  prev(
    request: service_pb.PrevRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: service_pb.PrevResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MusicPlayer/Prev',
        request,
        metadata || {},
        this.methodDescriptorPrev,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MusicPlayer/Prev',
    request,
    metadata || {},
    this.methodDescriptorPrev);
  }

  methodDescriptorAddSong = new grpcWeb.MethodDescriptor(
    '/MusicPlayer/AddSong',
    grpcWeb.MethodType.UNARY,
    service_pb.AddSongRequest,
    service_pb.AddSongResponse,
    (request: service_pb.AddSongRequest) => {
      return request.serializeBinary();
    },
    service_pb.AddSongResponse.deserializeBinary
  );

  addSong(
    request: service_pb.AddSongRequest,
    metadata: grpcWeb.Metadata | null): Promise<service_pb.AddSongResponse>;

  addSong(
    request: service_pb.AddSongRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: service_pb.AddSongResponse) => void): grpcWeb.ClientReadableStream<service_pb.AddSongResponse>;

  addSong(
    request: service_pb.AddSongRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: service_pb.AddSongResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MusicPlayer/AddSong',
        request,
        metadata || {},
        this.methodDescriptorAddSong,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MusicPlayer/AddSong',
    request,
    metadata || {},
    this.methodDescriptorAddSong);
  }

  methodDescriptorCreateSong = new grpcWeb.MethodDescriptor(
    '/MusicPlayer/CreateSong',
    grpcWeb.MethodType.UNARY,
    service_pb.CreateSongRequest,
    service_pb.CreateSongResponse,
    (request: service_pb.CreateSongRequest) => {
      return request.serializeBinary();
    },
    service_pb.CreateSongResponse.deserializeBinary
  );

  createSong(
    request: service_pb.CreateSongRequest,
    metadata: grpcWeb.Metadata | null): Promise<service_pb.CreateSongResponse>;

  createSong(
    request: service_pb.CreateSongRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: service_pb.CreateSongResponse) => void): grpcWeb.ClientReadableStream<service_pb.CreateSongResponse>;

  createSong(
    request: service_pb.CreateSongRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: service_pb.CreateSongResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MusicPlayer/CreateSong',
        request,
        metadata || {},
        this.methodDescriptorCreateSong,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MusicPlayer/CreateSong',
    request,
    metadata || {},
    this.methodDescriptorCreateSong);
  }

  methodDescriptorGetSong = new grpcWeb.MethodDescriptor(
    '/MusicPlayer/GetSong',
    grpcWeb.MethodType.UNARY,
    service_pb.GetSongRequest,
    service_pb.GetSongResponse,
    (request: service_pb.GetSongRequest) => {
      return request.serializeBinary();
    },
    service_pb.GetSongResponse.deserializeBinary
  );

  getSong(
    request: service_pb.GetSongRequest,
    metadata: grpcWeb.Metadata | null): Promise<service_pb.GetSongResponse>;

  getSong(
    request: service_pb.GetSongRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: service_pb.GetSongResponse) => void): grpcWeb.ClientReadableStream<service_pb.GetSongResponse>;

  getSong(
    request: service_pb.GetSongRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: service_pb.GetSongResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MusicPlayer/GetSong',
        request,
        metadata || {},
        this.methodDescriptorGetSong,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MusicPlayer/GetSong',
    request,
    metadata || {},
    this.methodDescriptorGetSong);
  }

  methodDescriptorUpdateSong = new grpcWeb.MethodDescriptor(
    '/MusicPlayer/UpdateSong',
    grpcWeb.MethodType.UNARY,
    service_pb.UpdateSongRequest,
    service_pb.UpdateSongResponse,
    (request: service_pb.UpdateSongRequest) => {
      return request.serializeBinary();
    },
    service_pb.UpdateSongResponse.deserializeBinary
  );

  updateSong(
    request: service_pb.UpdateSongRequest,
    metadata: grpcWeb.Metadata | null): Promise<service_pb.UpdateSongResponse>;

  updateSong(
    request: service_pb.UpdateSongRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: service_pb.UpdateSongResponse) => void): grpcWeb.ClientReadableStream<service_pb.UpdateSongResponse>;

  updateSong(
    request: service_pb.UpdateSongRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: service_pb.UpdateSongResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MusicPlayer/UpdateSong',
        request,
        metadata || {},
        this.methodDescriptorUpdateSong,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MusicPlayer/UpdateSong',
    request,
    metadata || {},
    this.methodDescriptorUpdateSong);
  }

  methodDescriptorDeleteSong = new grpcWeb.MethodDescriptor(
    '/MusicPlayer/DeleteSong',
    grpcWeb.MethodType.UNARY,
    service_pb.DeleteSongRequest,
    service_pb.DeleteSongResponse,
    (request: service_pb.DeleteSongRequest) => {
      return request.serializeBinary();
    },
    service_pb.DeleteSongResponse.deserializeBinary
  );

  deleteSong(
    request: service_pb.DeleteSongRequest,
    metadata: grpcWeb.Metadata | null): Promise<service_pb.DeleteSongResponse>;

  deleteSong(
    request: service_pb.DeleteSongRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: service_pb.DeleteSongResponse) => void): grpcWeb.ClientReadableStream<service_pb.DeleteSongResponse>;

  deleteSong(
    request: service_pb.DeleteSongRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: service_pb.DeleteSongResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MusicPlayer/DeleteSong',
        request,
        metadata || {},
        this.methodDescriptorDeleteSong,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MusicPlayer/DeleteSong',
    request,
    metadata || {},
    this.methodDescriptorDeleteSong);
  }

  methodDescriptorGetSongs = new grpcWeb.MethodDescriptor(
    '/MusicPlayer/GetSongs',
    grpcWeb.MethodType.UNARY,
    service_pb.GetSongsRequest,
    service_pb.GetSongsResponse,
    (request: service_pb.GetSongsRequest) => {
      return request.serializeBinary();
    },
    service_pb.GetSongsResponse.deserializeBinary
  );

  getSongs(
    request: service_pb.GetSongsRequest,
    metadata: grpcWeb.Metadata | null): Promise<service_pb.GetSongsResponse>;

  getSongs(
    request: service_pb.GetSongsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: service_pb.GetSongsResponse) => void): grpcWeb.ClientReadableStream<service_pb.GetSongsResponse>;

  getSongs(
    request: service_pb.GetSongsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: service_pb.GetSongsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MusicPlayer/GetSongs',
        request,
        metadata || {},
        this.methodDescriptorGetSongs,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MusicPlayer/GetSongs',
    request,
    metadata || {},
    this.methodDescriptorGetSongs);
  }

}

