// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: service.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MusicPlayerClient is the client API for MusicPlayer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MusicPlayerClient interface {
	Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (MusicPlayer_PlayClient, error)
	Pause(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error)
	Next(ctx context.Context, in *NextRequest, opts ...grpc.CallOption) (*NextResponse, error)
	Prev(ctx context.Context, in *PrevRequest, opts ...grpc.CallOption) (*PrevResponse, error)
	AddSong(ctx context.Context, in *AddSongRequest, opts ...grpc.CallOption) (*AddSongResponse, error)
	CreateSong(ctx context.Context, in *CreateSongRequest, opts ...grpc.CallOption) (*CreateSongResponse, error)
	GetSong(ctx context.Context, in *GetSongRequest, opts ...grpc.CallOption) (*GetSongResponse, error)
	UpdateSong(ctx context.Context, in *UpdateSongRequest, opts ...grpc.CallOption) (*UpdateSongResponse, error)
	DeleteSong(ctx context.Context, in *DeleteSongRequest, opts ...grpc.CallOption) (*DeleteSongResponse, error)
	GetSongs(ctx context.Context, in *GetSongsRequest, opts ...grpc.CallOption) (*GetSongsResponse, error)
}

type musicPlayerClient struct {
	cc grpc.ClientConnInterface
}

func NewMusicPlayerClient(cc grpc.ClientConnInterface) MusicPlayerClient {
	return &musicPlayerClient{cc}
}

func (c *musicPlayerClient) Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (MusicPlayer_PlayClient, error) {
	stream, err := c.cc.NewStream(ctx, &MusicPlayer_ServiceDesc.Streams[0], "/MusicPlayer/Play", opts...)
	if err != nil {
		return nil, err
	}
	x := &musicPlayerPlayClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MusicPlayer_PlayClient interface {
	Recv() (*PlayResponse, error)
	grpc.ClientStream
}

type musicPlayerPlayClient struct {
	grpc.ClientStream
}

func (x *musicPlayerPlayClient) Recv() (*PlayResponse, error) {
	m := new(PlayResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *musicPlayerClient) Pause(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error) {
	out := new(PauseResponse)
	err := c.cc.Invoke(ctx, "/MusicPlayer/Pause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicPlayerClient) Next(ctx context.Context, in *NextRequest, opts ...grpc.CallOption) (*NextResponse, error) {
	out := new(NextResponse)
	err := c.cc.Invoke(ctx, "/MusicPlayer/Next", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicPlayerClient) Prev(ctx context.Context, in *PrevRequest, opts ...grpc.CallOption) (*PrevResponse, error) {
	out := new(PrevResponse)
	err := c.cc.Invoke(ctx, "/MusicPlayer/Prev", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicPlayerClient) AddSong(ctx context.Context, in *AddSongRequest, opts ...grpc.CallOption) (*AddSongResponse, error) {
	out := new(AddSongResponse)
	err := c.cc.Invoke(ctx, "/MusicPlayer/AddSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicPlayerClient) CreateSong(ctx context.Context, in *CreateSongRequest, opts ...grpc.CallOption) (*CreateSongResponse, error) {
	out := new(CreateSongResponse)
	err := c.cc.Invoke(ctx, "/MusicPlayer/CreateSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicPlayerClient) GetSong(ctx context.Context, in *GetSongRequest, opts ...grpc.CallOption) (*GetSongResponse, error) {
	out := new(GetSongResponse)
	err := c.cc.Invoke(ctx, "/MusicPlayer/GetSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicPlayerClient) UpdateSong(ctx context.Context, in *UpdateSongRequest, opts ...grpc.CallOption) (*UpdateSongResponse, error) {
	out := new(UpdateSongResponse)
	err := c.cc.Invoke(ctx, "/MusicPlayer/UpdateSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicPlayerClient) DeleteSong(ctx context.Context, in *DeleteSongRequest, opts ...grpc.CallOption) (*DeleteSongResponse, error) {
	out := new(DeleteSongResponse)
	err := c.cc.Invoke(ctx, "/MusicPlayer/DeleteSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicPlayerClient) GetSongs(ctx context.Context, in *GetSongsRequest, opts ...grpc.CallOption) (*GetSongsResponse, error) {
	out := new(GetSongsResponse)
	err := c.cc.Invoke(ctx, "/MusicPlayer/GetSongs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MusicPlayerServer is the server API for MusicPlayer service.
// All implementations must embed UnimplementedMusicPlayerServer
// for forward compatibility
type MusicPlayerServer interface {
	Play(*PlayRequest, MusicPlayer_PlayServer) error
	Pause(context.Context, *PauseRequest) (*PauseResponse, error)
	Next(context.Context, *NextRequest) (*NextResponse, error)
	Prev(context.Context, *PrevRequest) (*PrevResponse, error)
	AddSong(context.Context, *AddSongRequest) (*AddSongResponse, error)
	CreateSong(context.Context, *CreateSongRequest) (*CreateSongResponse, error)
	GetSong(context.Context, *GetSongRequest) (*GetSongResponse, error)
	UpdateSong(context.Context, *UpdateSongRequest) (*UpdateSongResponse, error)
	DeleteSong(context.Context, *DeleteSongRequest) (*DeleteSongResponse, error)
	GetSongs(context.Context, *GetSongsRequest) (*GetSongsResponse, error)
	mustEmbedUnimplementedMusicPlayerServer()
}

// UnimplementedMusicPlayerServer must be embedded to have forward compatible implementations.
type UnimplementedMusicPlayerServer struct {
}

func (UnimplementedMusicPlayerServer) Play(*PlayRequest, MusicPlayer_PlayServer) error {
	return status.Errorf(codes.Unimplemented, "method Play not implemented")
}
func (UnimplementedMusicPlayerServer) Pause(context.Context, *PauseRequest) (*PauseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedMusicPlayerServer) Next(context.Context, *NextRequest) (*NextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Next not implemented")
}
func (UnimplementedMusicPlayerServer) Prev(context.Context, *PrevRequest) (*PrevResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prev not implemented")
}
func (UnimplementedMusicPlayerServer) AddSong(context.Context, *AddSongRequest) (*AddSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSong not implemented")
}
func (UnimplementedMusicPlayerServer) CreateSong(context.Context, *CreateSongRequest) (*CreateSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSong not implemented")
}
func (UnimplementedMusicPlayerServer) GetSong(context.Context, *GetSongRequest) (*GetSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSong not implemented")
}
func (UnimplementedMusicPlayerServer) UpdateSong(context.Context, *UpdateSongRequest) (*UpdateSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSong not implemented")
}
func (UnimplementedMusicPlayerServer) DeleteSong(context.Context, *DeleteSongRequest) (*DeleteSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSong not implemented")
}
func (UnimplementedMusicPlayerServer) GetSongs(context.Context, *GetSongsRequest) (*GetSongsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSongs not implemented")
}
func (UnimplementedMusicPlayerServer) mustEmbedUnimplementedMusicPlayerServer() {}

// UnsafeMusicPlayerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MusicPlayerServer will
// result in compilation errors.
type UnsafeMusicPlayerServer interface {
	mustEmbedUnimplementedMusicPlayerServer()
}

func RegisterMusicPlayerServer(s grpc.ServiceRegistrar, srv MusicPlayerServer) {
	s.RegisterService(&MusicPlayer_ServiceDesc, srv)
}

func _MusicPlayer_Play_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PlayRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MusicPlayerServer).Play(m, &musicPlayerPlayServer{stream})
}

type MusicPlayer_PlayServer interface {
	Send(*PlayResponse) error
	grpc.ServerStream
}

type musicPlayerPlayServer struct {
	grpc.ServerStream
}

func (x *musicPlayerPlayServer) Send(m *PlayResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MusicPlayer_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicPlayerServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MusicPlayer/Pause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicPlayerServer).Pause(ctx, req.(*PauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicPlayer_Next_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicPlayerServer).Next(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MusicPlayer/Next",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicPlayerServer).Next(ctx, req.(*NextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicPlayer_Prev_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrevRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicPlayerServer).Prev(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MusicPlayer/Prev",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicPlayerServer).Prev(ctx, req.(*PrevRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicPlayer_AddSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicPlayerServer).AddSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MusicPlayer/AddSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicPlayerServer).AddSong(ctx, req.(*AddSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicPlayer_CreateSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicPlayerServer).CreateSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MusicPlayer/CreateSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicPlayerServer).CreateSong(ctx, req.(*CreateSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicPlayer_GetSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicPlayerServer).GetSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MusicPlayer/GetSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicPlayerServer).GetSong(ctx, req.(*GetSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicPlayer_UpdateSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicPlayerServer).UpdateSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MusicPlayer/UpdateSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicPlayerServer).UpdateSong(ctx, req.(*UpdateSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicPlayer_DeleteSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicPlayerServer).DeleteSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MusicPlayer/DeleteSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicPlayerServer).DeleteSong(ctx, req.(*DeleteSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicPlayer_GetSongs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSongsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicPlayerServer).GetSongs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MusicPlayer/GetSongs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicPlayerServer).GetSongs(ctx, req.(*GetSongsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MusicPlayer_ServiceDesc is the grpc.ServiceDesc for MusicPlayer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MusicPlayer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MusicPlayer",
	HandlerType: (*MusicPlayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pause",
			Handler:    _MusicPlayer_Pause_Handler,
		},
		{
			MethodName: "Next",
			Handler:    _MusicPlayer_Next_Handler,
		},
		{
			MethodName: "Prev",
			Handler:    _MusicPlayer_Prev_Handler,
		},
		{
			MethodName: "AddSong",
			Handler:    _MusicPlayer_AddSong_Handler,
		},
		{
			MethodName: "CreateSong",
			Handler:    _MusicPlayer_CreateSong_Handler,
		},
		{
			MethodName: "GetSong",
			Handler:    _MusicPlayer_GetSong_Handler,
		},
		{
			MethodName: "UpdateSong",
			Handler:    _MusicPlayer_UpdateSong_Handler,
		},
		{
			MethodName: "DeleteSong",
			Handler:    _MusicPlayer_DeleteSong_Handler,
		},
		{
			MethodName: "GetSongs",
			Handler:    _MusicPlayer_GetSongs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Play",
			Handler:       _MusicPlayer_Play_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
